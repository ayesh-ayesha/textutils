{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/WorkText.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","data-bs-dismiss","aria-label","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","id","aria-current","onClick","toggleMode","htmlFor","WorkText","text","setText","useState","Fragment","style","color","heading","backgroundColor","value","onChange","event","target","rows","handleUpClick","newText","showAlert","handlelowClick","handleClearClick","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpaces","newtext","split","join","trim","length","replace","defaultProps","aboutText","App","setMode","setalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.f3d32ac5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n    }\r\n  return (\r\n\r\n  props.alert && <div className={`alert alert-${props.alert.type}warning alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n</div>\r\n\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\" >\r\n                About\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}` }>\r\n            <input onClick={props.toggleMode}\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n              DARK MODE\r\n            </label>\r\n          </div>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n        </form> */}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n  tile: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"set title here\",\r\n  aboutText: \"about text here\",\r\n};\r\n\r\n//  why we use keywork exact\r\n//  /user -->component1\r\n//  /users/home ---> component2\r\n","import React, { useState } from \"react\";\r\n\r\n\r\n\r\nexport default function WorkText(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"uppercase was clicked\"+text)\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to upper case\",\"success\")\r\n  };\r\n  const handlelowClick = () => {\r\n    // console.log(\"uppercase was clicked\"+text)\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lower case\",\"success\")\r\n\r\n  };\r\n  const handleClearClick = () => {\r\n    // console.log(\"uppercase was clicked\"+text)\r\n    let newText = (\"\");\r\n    setText(newText);\r\n    props.showAlert(\"Text cleared\",\"success\")\r\n\r\n  };\r\n  const handleCopy = () => {\r\n    var text=document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value );\r\n    props.showAlert(\"Text copied\",\"success\")\r\n\r\n  };\r\n  const handleExtraSpaces = () => {\r\n    let newtext=text.split(/[ ]+/);\r\n    setText(newtext.join(\" \"))\r\n    props.showAlert(\"Removed Extra Spaces\",\"success\")\r\n\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"on change\")\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState('');\r\n  \r\n  // text=\"enter text\"; // wrong way to change the state\r\n  // setText(\"enter your text here2\") //correct way to change the state\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\" style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black '}}\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn -primary mx-2\" onClick={handleUpClick} style={{color:props.mode==='dark'?'white':'black'}}>\r\n          convert to upper case\r\n        </button>\r\n        <button className=\"btn btn -primary mx-2\" onClick={handlelowClick} style={{color:props.mode==='dark'?'white':'black'}}>\r\n          convert to lower case\r\n        </button>\r\n        <button className=\"btn btn -primary mx-2\" onClick={handleClearClick} style={{color:props.mode==='dark'?'white':'black'}}>\r\n          clear text\r\n        </button>\r\n        <button className=\"btn btn -primary mx-2\" onClick={handleCopy} style={{color:props.mode==='dark'?'white':'black'}}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn -primary mx-2\" onClick={handleExtraSpaces} style={{color:props.mode==='dark'?'white':'black'}}>\r\n          Remove Extra Spaces\r\n        </button>\r\n    \r\n        \r\n      \r\n      </div>\r\n      <div className=\"container my-2\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>your text summary</h1>\r\n        <p>\r\n        {text.trim().split(\" \").length}  words and {text.replace(/\\s+/g, '').length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n        <h2>preview</h2>\r\n        <p>{text.length>0 ?text:\"Enter Something in textbox to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","// import logo from './logo.svg';\n\nimport './App.css';\nimport Alert from './components/Alert.js';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport WorkText from './components/WorkText.js';\n// import Counter from './components/Counter';\nimport React,{useState} from 'react';\nimport './components/style.css';\n// import { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\n\n// const router = createBrowserRouter([\n//   {\n//     path: \"/\",\n//     element: <Navbar />,\n//     children: [\n//       {\n//         path: \"/\",\n//         element: <WorkText />\n//       },\n//       {\n//         path: \"/about\",\n//         element: <About />\n//       }\n//     ]\n//   },\n// ]);\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode or light mode or not\n  const [alert, setalert] = useState(null)\n\n  const showAlert=(message,type)=>{\n    setalert({\n      msg:message,\n      type:type,\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n\n  }\n\n const toggleMode=()=>{\n  if(mode==='dark'){\n    setMode('light')\n    document.body.style.backgroundColor='white'\n    showAlert(\"Light mode has been enabled\",\"success\")\n    document.title='TextUtils-Light Mode'\n\n    // setInterval(() => {\n    //   document.title='TextUtils is Amazing website '\n    // }, 2000);\n    // setInterval(() => {\n    //   document.title='Install TextUtils now '\n    // }, 1500);\n  }else{\n    setMode('dark')\n    document.body.style.backgroundColor='grey'\n    showAlert(\"Dark mode has been enabled\",\"success\")\n    document.title='TextUtils-Dark Mode'\n\n  }\n }\n  return (\n<>\n{/* <BrowserRouter> */}\n<Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n<div className=\"container my-3\">\n <Alert alert={alert}/>\n  \n   {/* <Routes>  */}\n     {/* <Route exact path=\"/about\" element={<About/>}></Route>\n     <Route exact path=\"/\" element={< */}\n    < WorkText showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n    {/* }></Route>\n  </Routes>  */}\n  {/* <Counter title=\"Counter\"/>  */}\n  </div>\n  {/* </BrowserRouter> */}\n  </>\n\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}